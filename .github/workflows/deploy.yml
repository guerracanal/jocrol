name: Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: jocrol
  GAR_LOCATION: europe-west1
  SERVICE: jocrol
  IMAGE_NAME: jocrol
  REPOSITORY: jocrol # Nombre del repositorio de Artifact Registry

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Crear el repositorio de Artifact Registry si no existe
      - name: Create Artifact Registry repository
        run: |-
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.GAR_LOCATION }} \
            --description="Docker repository for ${{ env.SERVICE }}" || echo "Repository already exists"

      - name: Configure Docker to use gcloud as credential helper
        run: |-
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        run: |-
          docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |-
          gcloud run deploy ${{ env.SERVICE }} \
            --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --region ${{ env.GAR_LOCATION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10 \
            --set-env-vars="MONGO_URI=${{ secrets.MONGO_URI }}" \
            --set-env-vars="SECRET_KEY=${{ secrets.SECRET_KEY }}"